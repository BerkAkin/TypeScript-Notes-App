(()=>{"use strict";class t{constructor(t,e,s,n,o){this.id=t,this.content=e,this.date=s,this.title=n,this.checks=o}}class e{constructor(t,e){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild}setElementData(t,e,n,o,i){this.element.querySelector("#content").textContent=e,this.element.querySelector("#header").textContent=t,this.element.querySelector("#date").textContent=n,this.element.querySelector("#deleteBtn").addEventListener("click",(()=>s.deleteNote(o))),0!==i.length&&(this.element.querySelector("#content").innerHTML+='<hr style="margin-top:15px">',console.log(i));for(let t in i)this.element.querySelector("#checklistInNote").innerHTML+=`\n        <input type="checkbox" id="${i[t]}" class="${i[t]}" />\n        <p style="display:inline;" for="${i[t]}">${i[t]}</p><br>`;this.attach()}attach(){this.hostElement.insertAdjacentElement("afterbegin",this.element)}}const s=new class{constructor(){this.notes=[],this.loadFromLocalStorage()}loadFromLocalStorage(){const t=localStorage.getItem("notes");t&&(this.notes=JSON.parse(t)),this.renderNotes()}saveToLocalStorage(){localStorage.setItem("notes",JSON.stringify(this.notes))}noteAdder(e,s,n,o,i){const l=new t(e,s,n,o,i);this.notes.push(l),this.saveToLocalStorage(),this.renderNotes()}deleteNote(t){const e=this.notes.filter((e=>e.id!==t));this.notes=e,this.saveToLocalStorage(),this.renderNotes()}renderNotes(){document.getElementById("note-container").innerHTML="";for(let t of this.notes)new e("single-note","note-container").setElementData(t.title,t.content,t.date,t.id,t.checks)}};class n{constructor(t,e){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,this.attach()}attach(){this.hostElement.insertAdjacentElement("afterbegin",this.element)}}new class extends n{constructor(){super("tmp-note-container-header","app"),this.checkList=[],this.configure()}configure(){this.showModalBtn=document.querySelector("#add-btn"),this.showModalBtn.addEventListener("click",(()=>this.showModal())),this.modal=document.querySelector("#modal"),this.modalForm=document.querySelector("#addNoteForm"),this.modalForm.addEventListener("submit",this.gatherInputs.bind(this)),this.noteTitleInput=document.getElementById("inputField"),this.noteContentInput=document.getElementById("inputFieldTxt"),this.modalCancelButton=document.querySelector("#modalCancelButton"),this.modalCancelButton.addEventListener("click",(()=>this.hideModal())),this.checklistModalInput=document.querySelector("#checkAdderModalInput"),this.checklistModal=document.querySelector("#checkListAdderModal"),this.checklistModalCancelBtn=document.querySelector("#checklistModalCancelButton"),this.checklistModalCancelBtn.addEventListener("click",(()=>{this.checklistModalInput.value="",this.hideCheckModal()})),this.checklistModalAddBtn=document.querySelector("#checklistModalAddButton"),this.checklistModalAddBtn.addEventListener("click",(()=>{this.gatherCheckModalInputs()})),this.checklistBtn=document.querySelector("#modalAddChecklistButton"),this.checklistBtn.addEventListener("click",(()=>{this.showCheckModal()})),this.checklistList=document.querySelector("#checkListField")}showModal(){this.modal.style.display="flex"}hideModal(){this.checklistList.innerHTML="",this.checkList=[],this.modal.style.display="none"}gatherInputs(t){t.preventDefault();const e=this.noteContentInput.value,s=this.noteTitleInput.value,n=this.checkList;this.addNewNote(e,s,n)}addNewNote(t,e,n){const o=(new Date).toISOString().slice(0,10).split("-").reverse().join("/");s.noteAdder(Math.random(),t,o,e,n),this.checkList=[],this.checklistList.innerHTML="",this.hideModal()}addNewCheckItem(t){const e=`<input type="checkbox" id="${t}" class="${t}" /><label for="${t}">${t}</label><br>`;this.checklistList.innerHTML+=e}showCheckModal(){this.checklistModal.style.display="flex"}hideCheckModal(){this.checklistModal.style.display="none",this.showModal()}gatherCheckModalInputs(){this.checkList.push(this.checklistModalInput.value),this.addNewCheckItem(this.checklistModalInput.value),this.hideCheckModal(),console.log(this.checkList)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,